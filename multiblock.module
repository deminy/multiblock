<?php
// $Id$
/*
 * Implementation of hook_menu
 */
function multiblock_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
        'path' => 'admin/build/multiblock',
        'title' => t('Block Instances'),
        'description' => t('Create and delete instances of blocks.'),
        'callback' =>  'multiblock_general',
        'access' => user_access('administer blocks'),
        'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'multiblock/delete',
      'title' => t('Delete Block Instance'),
      'callback' => 'multiblock_delete',
      'access' => user_access('administer blocks'),
      'type' => MENU_CALLBACK,
    );
  }
  else {
  }
  return $items;
}

/*
 * Implementation of hook_block
 */
function multiblock_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    //get all of the block instances that exist
    $result = db_query("SELECT delta, title FROM {multiblock}");
    $blocks = array();
    //escape the titles and return an array of them keyed by their NEW deltas
    while ($row = db_fetch_object($result)) {
      $blocks[$row->delta] = array( 'info' => check_plain($row->title), );
    }
    return $blocks;
  }
  //any op besides list we want to dispatch the call to its respective module
  else if ($op == 'view' || $op == 'configure' || $op == 'save') {
    return multiblock_call_block($delta, $op, $edit);
  }
}

/*
 * Dispatch a hook_block call to it's respective module. Paramater $delta
 * is the new multiblock delta that we're using and $op is the op we are
 * dispatching.
 */
function multiblock_call_block($delta, $op, $edit) {
  $result = db_query("SELECT module, orig_delta, delta, multi_settings FROM {multiblock} WHERE delta='%s'", $delta);
  if ($block_info = db_fetch_object($result)) {
    //if this block is multiblock enabled, send it the delta of the block we're using
    if ($block_info->multi_settings == 1 ) {
      $edit['multiblock_delta'] = array(
          '#type' => 'value',
          '#value' => $block_info->delta,
      );
    }
    return module_invoke($block_info->module, 'block', $op, $block_info->orig_delta, $edit);
  }
  //no such multiblock, shouldn't ever happen
  return;
}

/*
 * Page callback for the "Manage Block Instances page"
 */
function multiblock_general() {
  //fetch blocks directly from modules using block.module function
  $blocks = _block_rehash();
  //sort blocks how we want them
  usort($blocks, 'multiblock_block_sort');
  
  //fetch "Add Instance"  form
  $form = drupal_get_form('multiblock_add_block', $blocks);
 
  //get an array of existing blocks
  $result = db_query('SELECT * FROM {multiblock} ORDER BY title'); 
  $multiblocks = array();
  while ($multiblock = db_fetch_object($result)) {
    $multiblocks[] = $multiblock;
  }
  
  return theme('multiblock_general', $form, $multiblocks);
}

/*
 * "Add Instance" form
 */
function multiblock_add_block($blocks) {
  $form = array();
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Instance Title'),
    '#maxlength' => 256,
    '#required' => TRUE,
  );
  
  //turn $blocks into form options of block types
  //remember we need the module and delta to be able to tell what kind of blocks
  //we're talking about. 
  $options = array();
  foreach ($blocks as $block) {
    //don't include multiblock module blocks in the list
    if ($block['module'] != 'multiblock') {
      $options[$block['module'].'***MB***'.$block['delta']] = $block['info'];
    }
  }
  
  $form['block'] = array(
    '#type' => 'select',
    '#title' => t('Block type'),
    '#options' => $options,
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add Instance'),
  );
  return $form;
}

/*
 * Call back that deletes the block instance with a delta of arg(2)
 * and redirects the user back to the "Manage Block Instances" form
 */
function multiblock_delete() {
  $multiblock_delta = arg(2);
  $result = db_query('DELETE FROM {multiblock} WHERE delta=%d', (int)$multiblock_delta);
  //if we actually deleted something
  if (ctype_digit($multiblock_delta) && db_affected_rows() == 1) {
    drupal_set_message(t('Block successfully deleted!'));
    _block_rehash();
  }
  else {
    drupal_set_message(t('There was a problem deleting the block'));
  }
  drupal_goto('admin/build/multiblock');
  exit;
}

/*
 * Validate "Add Block Instance" form
 */
function multiblock_add_block_validate($form_id, $form_values) {
  //make sure we are getting a valid block to add
  if (!preg_match('/^.+\*\*\*MB\*\*\*.+$/', $form_values['block'])) {
    form_set_error('block', t('Bad block module input, contact administrator'));
    return;
  }
  //make sure the block and delta exist
  $orig_block = multiblock_blockinfo_from_form($form_values['block']);
  if (!module_hook($orig_block['module'], 'block') ||
    !array_key_exists($orig_block['delta'], module_invoke($orig_block['module'], 'block', 'list'))) {
    form_set_error('block', t('Module or doesn\t exist, contact administrator'));
  }
}

/*
 * Add block instance to database from "Add Block Instance" form
 */
function multiblock_add_block_submit($form_id, $form_values) {
  //create new delta for block instance
  $delta = db_next_id('{multiblock}_delta');
  //get the original block info
  $orig_block = multiblock_blockinfo_from_form($form_values['block']);
  //check whether this module is multiblock enabled
  $mb_enabled = (int)(module_invoke($orig_block['module'], 'block', 'mb_enabled') == 'mb_enabled');
  $sql = "INSERT INTO {multiblock}
          (delta, title, module, orig_delta, multi_settings)
          VALUES (%d, '%s', '%s', '%s', %d)";
  db_query($sql, $delta, $form_values['title'], $orig_block['module'], $orig_block['delta'], $mb_enabled);
  drupal_set_message(t('Block instance %instance created.', array('%instance' => $form_values['title'])));
}

/*
 * Custom sort based on info element of array
 */
function multiblock_block_sort($a, $b) {
  return strcmp($a['info'], $b['info']);
}

/*
 * Get the module and delta from the "Add Block Instance" block form element
 */
function multiblock_blockinfo_from_form($form_value) {
  $matches = array();
  preg_match('/^(.+)\*\*\*MB\*\*\*(.+)$/', $form_value, $matches);
  return array ('module' => $matches[1], 'delta' => $matches[2]);
}

/*
 * Get title of a block by its module and delta
 */
function multiblock_get_block_title($module, $delta) {
  $block_info = module_invoke($module, 'block', 'list');
  return $block_info[$delta]['info'];
}

/*
 * Theme function for the "Manage Block Instances" page
 */
function theme_multiblock_general($add_block_form, $multiblocks) {
  $output = '';
  
  $output .= '<p><h3>' . t('Add Instance') . '</h3>' . $add_block_form . '</p>';
  
  $header = array (t('Title'), t('Original Block Title'), t('Original Module'), t('Original Delta'), t('Action'));
  
  foreach ($multiblocks as $row) {
    $delete_link = l(t('Delete'), 'multiblock/delete/'. $row->delta);
    $title = multiblock_get_block_title($row->module, $row->orig_delta);
    $rows[] = array(check_plain($row->title), $title, $row->module, $row->orig_delta, $delete_link);
  }
  
  $output .= '<p><h3>' . t('Manage Instances') . '</h3>' . theme('table', $header, $rows) . '</p>';
  
  return $output;
}